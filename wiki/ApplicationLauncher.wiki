*Note*! New RemoteApplications library should be used if you are using Java version 1.5 or newer. 

!ApplicationLauncher is used for launching java applications in a separate process and importing Robot Framework (RF) libraries to operate on them. This is useful when application does something that cannot be tested with RF when running inside the same JVM. Such cases are when System.exit is called in the SUT or when multiple applications running in separate JVMs need to be tested in parallel.

!ApplicationLauncher can also be used for testing Java Web Start applications.

===Library documentation===

 * [http://robotframework-javatools.googlecode.com/svn/jvmconnector/tags/jvmconnector-0.9/doc/ApplicationLauncher.html Version 0.9]

===Examples===

First example shows how to use !ApplicationLauncher with Java Webstart technology. The second example demonstrates !ApplicationLauncher usage with a standalone application.

====Java Web Start====

*Prerequisites:*
 * You'll need javaws and jybot in the path.
 * Configure your proxy settings to Java Web Start if necessary.
 * [http://robotframework-javatools.googlecode.com/svn/examples/javaws-demo/demo/lib/test-application.jnlp Start the application] manually and agree with the confirmation dialog if necessary.
 
*Then:*

 * Download the [http://robotframework-javatools.googlecode.com/files/javaws-demo-2009-07-07.zip javaws-demo.zip]
 * Unzip it and chdir to demo directory
 * If you are behind a firewall, you'll need to set the proxy properties. To do this, edit the `robot-javaws-test.html` file and uncomment the _Suite Setup_ line from the settings table *and* set the correct values for you in the _Set Proxy_ user keyword:
|| *Set Proxy* ||Set System Property||_http.proxyHost_||yourproxyhost||
||         ||Set System Property||_http.proxyPort_||yourproxyport||

 * Last, from command line, run `./run.py robot-javaws-test.html`

The test applications sources can be found from [http://robotframework-javatools.googlecode.com/svn/examples/javaws-demo/ here].

====Standalone Application====

*Demo:*
 * Download the [http://robotframework-javatools.googlecode.com/files/multilibrary-demo-2009-07-07.zip multilibrary-demo.zip]
 * Unzip it and chdir to demo directory
 * From command line, run `./run.py login_and_exit.html`

===Usage===

Download !ApplicationLauncher.py from [http://code.google.com/p/robotframework-javatools/downloads/list the download page]. It depends on jvmconnector which can be downloaded from the same page. See [http://robotframework.googlecode.com/svn/tags/robotframework-2.1/doc/userguide/RobotFrameworkUserGuide.html#taking-test-libraries-into-use RF UserGuide] or examples below on how to take it into use. Jvmconnector needs to be added to CLASSPATH before starting RF.

====Standalone Application====

Application launching and remote library imports are wrapped in a user keyword _!StartApplicationAndImportLibraries_. The idea is to have one !ApplicationLauncher per application and switch between the applications using the [http://robotframework.googlecode.com/svn/tags/robotframework-2.1/doc/libraries/BuiltIn.html#Set%20Library%20Search%20Order SetLibrarySearchOrder] keyword introduced in RF 2.1 in _!SelectApplication_ user keyword.

In this example every application has a unique name. Every application has a launcher with name unique name + Launcher ie. myAppLauncher. In case you need to open multiple instances of the same application you need to have unique names for each instance ie. myApp1, myApp2, etc.

|| *Setting* || *Value* || *Value* || *Value* || *Value* ||
|| Library || !ApplicationLauncher.py || com.acme.!MyApplication || WITH NAME || myAppLauncher ||
|| Library || !ApplicationLauncher.py || com.acme.!OtherApplication || WITH NAME || otherAppLauncher ||
|| Test Teardown || closeApplications || myApp || otherApp || ||
|| || ||  ||  || ||
|| *Test Case* || *Action* || *Argument* || *Argument* || *Argument* ||
|| Start Applications And Do Something With Them || startApplicationAndImportLibraries || myApp || foo bar || ||
|| || startApplicationAndImportLibraries || otherApp || baz || -!DsomeProperty=someValue ||
|| || selectApplication || myApp || || ||
|| || selectMainWindow || || || ||
|| || # do something with myApp || || || ||
|| || selectApplication || otherApp || || ||
|| || selectMainWindow || || || ||
|| || # do something with otherApp || || || ||
|| || ||  ||  || ||
|| *Keyword* || *Action* || *Argument* || *Argument* || *Argument* ||
|| startApplicationAndImportLibraries || `[`arguments`]` || ${name} || ${arguments} || ${jvmArguments}= ||
|| || setLibrarySearchOrder || ${name}Launcher || || ||
|| || startApplication || ${arguments} || ${jvmArguments} || ||
|| || importRemoteLibrary || !SwingLibrary || WITH NAME || !SwingLibrary${name} ||
|| || importRemoteLibrary || !JavaTools || WITH NAME || !JavaTools${name} ||
|| || ||  ||  || ||
|| selectApplication || `[`arguments`]` || ${name} || || ||
||  || setLibrarySearchOrder || !SwingLibrary${name} || !JavaTools${name} || ||
|| || ||  ||  || ||
|| closeApplications || `[`arguments`]` || @{names} || || ||
||  || :FOR || ${name} || IN || @{names} ||
||  ||  || setLibrarySearchOrder || ${name}Launcher || ||
||  ||  || closeApplication || || ||

====Java Web Start====

 # Sign testing jars. [http://code.google.com/p/robotframework-javatools/downloads/list Jvmconnector.jar] and all the other dependencies used in testing need to be signed with the same key as your application.
 # Wrap all the testing dependencies into jar files and copy them to a directory.
 # When you create the library you'll need to provide the path to the directory containing the dependencies. All the jar files from this directory will be added to your webstart application's classpath: || Library     || !ApplicationLauncher || http://myhost/myapp.jnlp || 60seconds || *${CURDIR}/test-lib* ||
 # Launch the application: || Start Application ||
 # Import remote libraries, notice that all the libraries need to be wrapped in jars and present in the abovementioned directory for dependencies: || Import Remote Library || !SwingLibrary ||
 # Operate on the application
 # At the end, you can use `Close Application` keyword to kill the SUT's jvm.

====Robot Agent====

Enables testing applications that are not started from !ApplicationLauncher. Works only on java 1.5 or higher.

Sometimes you cannot control the startup of the system under test. For example when one application starts another. In this situation you are not able to start the application with !ApplicationLauncher.
You can still access the target jvm and import remote libraries to operate on it by using the Robot Agent.

This works by setting an environment variable _JAVA_TOOL_OPTIONS_ to include a javaagent option that points to the jvmconnector.jar. The Robot Agent will then start the listener service to all started jvms which allows us to access them.

Robot Agent works both with java webstart applications and standalone java applications.

=====Using Robot Agent=====

1. Set _JAVA_TOOL_OPTIONS_ environment variable:

  On Windows:
  {{{
  set JAVA_TOOL_OPTIONS=-javaagent:${jvmconnector.jar}=${path_to_testing_dependencies_dir}
  }}}

  On Linux: 
  {{{
  export JAVA_TOOL_OPTIONS=-javaagent:${jvmconnector.jar}=${path_to_testing_dependencies_dir}
  }}}

  Where _${jvmconnector.jar}_ is the path to the jvmconnector package and _${path_to_testing_dependencies_dir}_ is the path to the directory containing the test library jars.

*N.B:* Under java 1.5 you have to package the jvmconnector.jar and all your testing dependencies into one big jar, you cannot provide the testing jars as arguments to the agent due to a limitation in java 1.5's api.

2. When testing java webstart applications a [http://robotframework-javatools.googlecode.com/svn/jvmconnector/trunk/robot-tests/resources/allow_libraries.policy permission file that allows the agent to be used] must be copied to *%HOME%\.java.policy*

3. Start testing.

=====Robot Agent Example=====

Download the [http://robotframework-javatools.googlecode.com/files/robot-javaws-demo-2009-09-07.zip demo package] and extract its contents. Follow the instructions in the [http://robotframework-javatools.googlecode.com/svn/examples/javaws-demo/demo/README.txt README.txt].

===Troubleshooting===

*Problem:* You get the following exception when trying to launch your application:

{{{
  SSLHandshakeException: sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException:
  unable to find valid certification path to requested target
}}}

*Cause:* Your application is probably using [http://en.wikipedia.org/wiki/Https https] and a [http://en.wikipedia.org/wiki/Self_signed_certificate self signed certificate].

*Solution:* Create your own truststore using the instructions found here: http://blogs.sun.com/andreas/entry/no_more_unable_to_find and set the correspondig system properties:

|| *Set System Property* || _javax.net.ssl.trustStore_ || C:/truststore/jssecacerts || # change this to point to your truststore ||
|| *Set System Property* || _javax.net.ssl.trustStorePassword_ || changeit || ||

*Set System Property* keyword is found in the JavaTools library.