!WebstartLauncher is a convenience library that comes with !JvmConnector.
It is used for launching a Java Web Start application and for starting a RMI
service inside that application's JVM so that keyword invocations can reach it.

===Disclaimer===

Don't use this library unless absolutely necessary. !WebstartLauncher is not really very user friendly and it involves setting up rmi services in xml configuration files and creating custom truststores for your self signed certificates. It will both complicate and slow down your tests. We recommend to create your application in such a way that it can be tested as a standalone application too so that Java Web Start can be left out of the equation.

===Library documentation===

*Importing*
|| *Arguments* || *Documentation* ||
|| _path_to_testing_resources_directory_ || _path_to_testing_resources_directory_: should point to a directory that contains at least the jvmconnector jar (which you can get from [http://code.google.com/p/robotframework-javatools/downloads/list here]) and the jar that contains the library you want to test your application with eg. [http://code.google.com/p/robotframework-swinglibrary/ SwingLibrary]. All these jars should be signed with the same key as your application. ||

*Keywords*

|| *Keyword* || *Arguments* || *Documentation* ||
|| Start Webstart Application And Rmi Service || _path_to_rmi_configuration_file_, _jnlp_url_ || Launches the webstart application and the rmi service. <br> _path_to_rmi_configuration_file_: should point to the rmi configuration file. See [WebstartLauncher#Usage usage] for an example. <br> _jnlp_url_: your application's url. ||
|| Create Rmi Enhanced Jnlp || _path_to_rmi_configuration_file_, _jnlp_url_ || Returns the path to the local copy of the modified JNLP. <br> This is useful if you need to do some postprocessing to the jnlp and/or want to launch the application in a custom fashion. ||


*Examples* 

|| *Setting* || *Value* || *Value* ||
|| Library || !WebstartLauncher || _$CURDIR${/}test-lib$_ ||


|| *Test Case* || *Action* || *Argument* || *Argument* ||
|| _Start Application_ || Start Webstart Application And Rmi Service || _${CURDIR}${/}test-lib${/}rmiConfig.xml_ || _http://acme.com/myapp.jnlp_ ||


===!WebstartLauncher Example===
*Prerequisites:*
 * You'll need javaws and jybot in the path.
 * Configure your proxy settings to Java Web Start if necessary.
 * [http://robotframework-javatools.googlecode.com/svn/examples/javaws-demo/demo/lib/test-application.jnlp Start the application] manually and agree with the confirmation dialog if necessary.
 
*Then:*

 * Download the [http://robotframework-javatools.googlecode.com/files/javaws-demo-2009-02-24.zip javaws-demo.zip]
 * Unzip it and chdir to demo directory
 * If you are behind a firewall, you'll need to set the proxy properties for !WebstartLauncher. To do this, edit the `robot-javaws-test.html` file and uncomment the lines that have been commented out *and* set the correct values for you in the _Set Proxy_ user keyword:
|| *Set Proxy* ||Set System Property||_http.proxyHost_||yourproxyhost||
||         ||Set System Property||_http.proxyPort_||yourproxyport||

 * Last, from command line, run `./run.py robot-javaws-test.html`

The test applications sources can be found from [http://robotframework-javatools.googlecode.com/svn/examples/javaws-demo/ here].

===Usage===

 # Sign testing jars. [http://code.google.com/p/robotframework-javatools/downloads/list Jvmconnector.jar] and all the other dependencies used in testing need to be signed with the same key as your application.
 # Configure your Robot Framework libraries. Here is an example configuration file which imports !SwingLibrary.
{{{
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN//EN"
        "http://www.springframework.org/dtd/spring-beans.dtd">
<beans>
  <bean id="swingLibrary" class="SwingLibrary" />
  <bean id="swingService" class="org.robotframework.jvmconnector.server.CloseableRobotRmiService">
    <constructor-arg>
      <bean class="org.robotframework.jvmconnector.server.SimpleRobotRmiService">
        <property name="library" ref="swingLibrary" />
      </bean>
    </constructor-arg>
  </bean>

  <bean id="serviceExporter" class="org.springframework.remoting.rmi.RmiServiceExporter">
    <property name="serviceName" value="jvmConnector" />
    <property name="serviceInterface" value="org.robotframework.jvmconnector.server.RobotRmiService" />
    <property name="service" ref="swingService" />
  </bean>
</beans>
}}}
 # Copy all the testing dependencies to a directory.
 # When you create the library you'll need to provide the path to the directory containing the dependencies. All the jar files from this directory will be added to your webstart application's classpath: || Library     || !WebstartLauncher || ${CURDIR}${/}test-lib ||
 # Launch the application and the RMI service: || Start Webstart Application And Rmi Service || ${CURDIR}${/}myRmiConfig.xml || http://myhost.com/myApp.jnlp ||
 # Use the [http://robotframework-javatools.googlecode.com/svn/jvmconnector/tags/jvmconnector-0.7/tools/RemoteLibrary.py RemoteLibrary] to open the RMI channel. In the near future !RemoteLibrary will be integrated into [http://code.google.com/p/robotframework/source/browse/#svn/trunk/proto/remote Robot Framework]. Meanwhile you can get it from [http://robotframework-javatools.googlecode.com/svn/jvmconnector/tags/jvmconnector-0.7/tools/RemoteLibrary.py here].  || Import Library || ${CURDIR}${/}test-lib${/}!RemoteLibrary.py ||
 # Start testing, notice that the _first_ keyword invocation will probably have to be done with [http://robotframework.googlecode.com/svn/tags/robotframework-2.0.4/doc/libraries/BuiltIn.html#Wait%20Until%20Keyword%20Succeeds Wait Until Keyword Succeeds] because your application might take some time to start.  || Wait Until Keyword Succeeds || 30 || 2 || Select Main Window ||
 # At the end, close the application. For the moment "System Exit" keyword cannot handle gracefully the shutdown of the Webstart JVM so it needs to be used in conjunction with [http://robotframework.googlecode.com/svn/tags/robotframework-2.0.4/doc/libraries/BuiltIn.html#Run%20Keyword%20And%20Ignore%20Error Run Keyword And Ignore Error] || Run Keyword And Ignore Error || System Exit ||

===Troubleshooting===

*Problem:* You get the following exception when trying to launch your application:

{{{
  SSLHandshakeException: sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException:
  unable to find valid certification path to requested target
}}}

*Cause:* Your application is probably using [http://en.wikipedia.org/wiki/Https https] and a [http://en.wikipedia.org/wiki/Self_signed_certificate self signed certificate].

*Solution:* Create your own truststore using the instructions found here: http://blogs.sun.com/andreas/entry/no_more_unable_to_find and set the correspondig system properties:

|| *Set System Property* || _javax.net.ssl.trustStore_ || C:/truststore/jssecacerts || # change this to point to your truststore ||
|| *Set System Property* || _javax.net.ssl.trustStorePassword_ || changeit || ||