ClassPathLibrary maps one keyword to one class. Both AnnotationLibrary and !ClassPathLibrary require a default constructor which limits the implementation.  If these are a problem, you can use Spring configuration files to wire keywords any way you want. Here's an example of a Spring configuration file: 

{{{
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN//EN"
	"http://www.springframework.org/dtd/spring-beans.dtd">

<beans>
  <bean id="componentShouldBeVisible" class="com.acme.mycomponent.keyword.ComponentVisibility">
    <constructor-arg type="boolean" value="true" />
  </bean>

  <bean id="componentShouldNotBeVisible" class="com.acme.oss.mycomponent.keyword.ComponentVisibility">
    <constructor-arg type="boolean" value="false" />
  </bean>
</beans>
}}}

The pattern used to find configuration files must be given as an argument when importing the library, eg: `com/acme/**/keywords.xml`.
Only beans of type [http://robotframework-javalib-core.googlecode.com/svn/trunk/src/main/java/org/robotframework/javalib/keyword/Keyword.java org.robotframework.javalib.keyword.Keyword] are interpreted to be keyword implementations.

*Usage:*
|| *Setting* || *Value* || *Value* ||
|| Library || org.robotframework.javalib.library.!SpringLibrary || com/`**`/keyword.xml ||

Read more about the Spring Framework at http://www.springframework.org/
