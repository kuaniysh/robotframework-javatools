#labels Featured
!JvmConnector is a module that enables remote keyword invocation. This
is useful in situations where your keywords reside in another JVM than
robot.

===What is !JvmConnector?===

Some java applications cannot be run from within the same process as
robot (eg. Java Webstart apps). Accessing directly this kind of system's
components from outside is impossible and we need to
establish some kind of inter-process communication between robot and
the [http://en.wikipedia.org/wiki/System_Under_Test SUT].
This is what !JvmConnector does.

!JvmConnector is a proxy library that connects robot to the remote [http://en.wikipedia.org/wiki/System_Under_Test SUT]
with [http://en.wikipedia.org/wiki/Java_remote_method_invocation RMI],
hiding the fact that the keywords reside in another [http://en.wikipedia.org/wiki/Jvm JVM] than
robot. !JvmConnector delegates the keyword calls it receives to the actual
keyword implementations on the target [http://en.wikipedia.org/wiki/Jvm JVM]. It also takes care of
redirecting all the logging that keywords do on the target system back
to robot and handles exceptions thrown on the remote system so that
robot error messages are presented in a meaningful way.

http://robotframework-javatools.googlecode.com/svn/wiki/images/jvmconnection.png

===!WebstartLauncher===

!WebstartLauncher is a convenience library that comes with !JvmConnector.
It is used for launching a Java webstart application and for starting a RMI
service inside that application's JVM so that keyword invocations can reach it.

====Example====
*Prerequisites:*
 # You'll need javaws and jybot in the path.
 # [http://robotframework-javatools.googlecode.com/svn/examples/javaws-demo/demo/lib/test-application.jnlp Start the application] manually and agree with the confirmation dialog if necessary.

*Then:*

 # Download the [http://robotframework-javatools.googlecode.com/files/javaws-demo-2009-02-15.zip javaws-demo.zip]
 # Unzip it and chdir to demo directory
 # Run `./run.py test.tsv`

The test applications sources can be found from [http://robotframework-javatools.googlecode.com/svn/examples/javaws-demo/ here].

====Using !WebstartLauncher====

 # Sign testing jars, [http://code.google.com/p/robotframework-javatools/downloads/list jvmconnector.jar] and all the other dependencies used in testing need to be signed with the same key as your application.
 #. Configure your libraries, here is an example configuration file which imports !SwingLibrary. !CloseableRobotRmiService, used here, provides an extra keyword called "System Exit" which can be used to close the webstart application's JVM.
{{{
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN//EN"
        "http://www.springframework.org/dtd/spring-beans.dtd">
<beans>
  <bean id="swingLibrary" class="SwingLibrary" />
  <bean id="swingService" class="org.robotframework.jvmconnector.server.CloseableRobotRmiService">
    <constructor-arg>
      <bean class="org.robotframework.jvmconnector.server.SimpleRobotRmiService">
        <property name="library" ref="swingLibrary" />
      </bean>
    </constructor-arg>
  </bean>

  <bean id="serviceExporter" class="org.springframework.remoting.rmi.RmiServiceExporter">
    <property name="serviceName" value="jvmConnector" />
    <property name="serviceInterface" value="org.robotframework.jvmconnector.server.RobotRmiService" />
    <property name="service" ref="swingService" />
  </bean>
</beans>
}}}
 # Copy all the testing dependencies to a directory
 # Create the library and provide the path to the directory containing the dependencies. All the jar files from this directory will be added to your webstart application's classpath:
 || * Setting * || * Value * || * Value * ||
 || Library || !WebstartLauncher || ${CURDIR}${/}test-lib ||

|| * Test Case * || * Action * || 
|| !WebstartLauncher Launches Java Webstart Application || Launch My Webstart Application ||
|| || Import !RemoteLibrary ||
|| || Do Something With The Application ||
|| || Close The Application ||

|| * Keyword * || * Action * || * Argument * || * Argument * || * Argument * ||
|| Launch My Webstart Application || Start Webstart Application And Rmi Service || ${CURDIR}${/}lib${/}myRmiConfig.xml || http://myhost.com/myApp.jnlp || || 
|| Import !RemoteLibrary || Import Library || ${CURDIR}${/}${/}lib/!RemoteLibrary.py || || ||
|| Do Something With The Application ||  Wait Until Keyword Succeeds || 30 || 2 || Select Main Window || 
|| Close The Application || Run Keyword And Ignore Error || System Exit || || || 

There is a plan to integrate !RemoteLibrary into Robot Framework's
core. Meanwhile you can get it from
[http://robotframework-javatools.googlecode.com/svn/jvmconnector/tags/jvmconnector-0.7/tools/RemoteLibrary.py here].

===Maven2===

To use jvmconnector in your maven2 project add the following sections in your _pom.xml_:

{{{
  <dependencies>
    <dependency>
      <groupId>org.robotframework</groupId>
      <artifactId>jvmconnector</artifactId>
      <version>0.7</version>
    </dependency>
  </dependencies>

  <repositories>
    <repository>
      <id>laughingpanda</id>
      <url>http://www.laughingpanda.org/maven2</url>
    </repository>
  </repositories>
}}}

For those using jre 1.4 just add `<classifier>jre1.4</classifier>` to the dependency:

{{{
  <dependencies>
    <dependency>
      <groupId>org.robotframework</groupId>
      <artifactId>jvmconnector</artifactId>
      <version>0.7</version>
      <classifier>jre1.4</classifier>
    </dependency>
  </dependencies>
}}}

