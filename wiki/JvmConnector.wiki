#labels Featured
!JvmConnector is a module that enables remote keyword invocation. This
is useful in situations where your keywords reside in another JVM than
robot.

===What is !JvmConnector?===

Some java applications cannot be run from within the same process as
robot (eg. Java Webstart apps). Accessing directly this kind of system's
components from outside is impossible and we need to
establish some kind of inter-process communication between robot and
the [http://en.wikipedia.org/wiki/System_Under_Test SUT].
This is what !JvmConnector does.

!JvmConnector is a proxy library that connects robot to the remote [http://en.wikipedia.org/wiki/System_Under_Test SUT]
with [http://en.wikipedia.org/wiki/Java_remote_method_invocation RMI],
hiding the fact that the keywords reside in another [http://en.wikipedia.org/wiki/Jvm JVM] than
robot. !JvmConnector delegates the keyword calls it receives to the actual
keyword implementations on the target [http://en.wikipedia.org/wiki/Jvm JVM]. It also takes care of
redirecting all the logging that keywords do on the target system back
to robot and handles exceptions thrown on the remote system so that
robot error messages are presented in a meaningful way.

====!JvmConnector in action===

http://robotframework-javatools.googlecode.com/svn/wiki/images/jvmconnection.png

===Demo===

In this example we use !JvmConnector and [http://code.google.com/p/robotframework-swinglibrary/ SwingLibrary] to test a simple [http://en.wikipedia.org/wiki/Java_Web_Start Java Web Start] application. [http://robotframework-javatools.googlecode.com/svn/wiki/demo/jvmconnector-demo/test-application.jnlp Try the application].

 # Download the [http://robotframework-javatools.googlecode.com/files/jvmconnector-with-javaws-demo.zip jvmconnector-with-javaws-demo.zip]
 # Unzip it and chdir to demo directory
 # Run `./run.py test.tsv`

You'll need javaws and jython in the path.

The test applications sources can be found from [http://robotframework-javatools.googlecode.com/svn/examples/javaws-demo/ here].

===Maven2===

To use jvmconnector in your maven2 project add the following sections in your _pom.xml_:

{{{
  <dependencies>
    <dependency>
      <groupId>org.robotframework</groupId>
      <artifactId>jvmconnector</artifactId>
      <version>0.7</version>
    </dependency>
  </dependencies>

  <repositories>
    <repository>
      <id>laughingpanda</id>
      <url>http://www.laughingpanda.org/maven2</url>
    </repository>
  </repositories>
}}}

For those using jre 1.4 just add `<classifier>jre1.4</classifier>` to the dependency:

{{{
  <dependencies>
    <dependency>
      <groupId>org.robotframework</groupId>
      <artifactId>jvmconnector</artifactId>
      <version>0.7</version>
      <classifier>jre1.4</classifier>
    </dependency>
  </dependencies>
}}}


===!WebstartLauncher===

Starts a Java webstart application and RMI service for invoking keywords from
the application's JVM.

====Usage====
|| * Setting * || * Value * || * Value * ||
|| Library || !WebstartLauncher || ${test-lib} ||

|| * Test Case * || * Action * || 
|| !WebstartLauncher Launches Java Webstart Application || Launch My Webstart Application ||
|| || Import !RemoteLibrary ||
|| || Do Something With The Application ||
|| || Close The Application ||


|| * Keyword * || * Action * || * Argument * || * Argument * || * Argument * || * Argument * ||
|| Launch My Webstart Application || Start Webstart Application And Rmi Service || ${CURDIR}${/}lib${/}myRmiConfig.xml || http://myhost.com/myApp.jnlp || || ||
|| || || || || || ||
|| Import !RemoteLibrary || Import Library || ${CURDIR}${/}${/}lib/!RemoteLibrary.py || rmi://localhost:11099/swingLibrary || WITH NAME || !SwingLibrary ||
|| || || || || || ||
|| Do Something With The Application ||  Wait Until Keyword Succeeds || 30 || 2 || Select Main Window || ||
|| || || || || || ||
|| Close The Application || Run Keyword And Ignore Error || System Exit || || || ||


There is a plan to integrate !RemoteLibrary into Robot Framework's
core. Meanwhile you can get it from
[http://robotframework-javatools.googlecode.com/svn/jvmconnector/tags/jvmconnector-0.7/tools/RemoteLibrary.py here].
